// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: occasion.sql

package repository

import (
	"context"
)

const findOccasionByName = `-- name: FindOccasionByName :one
SELECT id, name FROM occasion WHERE name = $1
`

func (q *Queries) FindOccasionByName(ctx context.Context, name string) (Occasion, error) {
	row := q.db.QueryRow(ctx, findOccasionByName, name)
	var i Occasion
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertOccasion = `-- name: InsertOccasion :one

INSERT INTO occasion (id, name)
VALUES (uuid_generate_v4(), $1)
RETURNING id, name
`

func (q *Queries) InsertOccasion(ctx context.Context, name string) (Occasion, error) {
	row := q.db.QueryRow(ctx, insertOccasion, name)
	var i Occasion
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
