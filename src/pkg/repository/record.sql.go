// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: record.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const findRecordByID = `-- name: FindRecordByID :one
SELECT id, session_id, speaker_id, content, events, sequence_number FROM record WHERE id = $1
`

func (q *Queries) FindRecordByID(ctx context.Context, id uuid.UUID) (Record, error) {
	row := q.db.QueryRow(ctx, findRecordByID, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.SpeakerID,
		&i.Content,
		&i.Events,
		&i.SequenceNumber,
	)
	return i, err
}

const findRecordsBySessionID = `-- name: FindRecordsBySessionID :many
SELECT id, session_id, speaker_id, content, events, sequence_number FROM record WHERE session_id = $1 ORDER BY sequence_number
`

func (q *Queries) FindRecordsBySessionID(ctx context.Context, sessionID uuid.UUID) ([]Record, error) {
	rows, err := q.db.Query(ctx, findRecordsBySessionID, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.SpeakerID,
			&i.Content,
			&i.Events,
			&i.SequenceNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRecordsBySpeakerID = `-- name: FindRecordsBySpeakerID :many
SELECT id, session_id, speaker_id, content, events, sequence_number FROM record WHERE speaker_id = $1 ORDER BY sequence_number
`

func (q *Queries) FindRecordsBySpeakerID(ctx context.Context, speakerID uuid.UUID) ([]Record, error) {
	rows, err := q.db.Query(ctx, findRecordsBySpeakerID, speakerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.SpeakerID,
			&i.Content,
			&i.Events,
			&i.SequenceNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRecord = `-- name: InsertRecord :one
INSERT INTO record (id, session_id, speaker_id, content, events, sequence_number)
VALUES (uuid_generate_v4(), $1, $2, $3, $4, $5)
RETURNING id, session_id, speaker_id, content, events, sequence_number
`

type InsertRecordParams struct {
	SessionID      uuid.UUID `json:"session_id"`
	SpeakerID      uuid.UUID `json:"speaker_id"`
	Content        string    `json:"content"`
	Events         []byte    `json:"events"`
	SequenceNumber int32     `json:"sequence_number"`
}

func (q *Queries) InsertRecord(ctx context.Context, arg InsertRecordParams) (Record, error) {
	row := q.db.QueryRow(ctx, insertRecord,
		arg.SessionID,
		arg.SpeakerID,
		arg.Content,
		arg.Events,
		arg.SequenceNumber,
	)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.SpeakerID,
		&i.Content,
		&i.Events,
		&i.SequenceNumber,
	)
	return i, err
}
